# === 1. Projektstruktur erstellen ===
mkdir repairpoint24-crm && cd repairpoint24-crm
mkdir server client

# === 2. Backend einrichten ===
cd server
npm init -y
npm install express mongoose cors dotenv

# Datei: index.js
cat > index.js << 'EOF'
const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");
require("dotenv").config();

const app = express();
app.use(cors());
app.use(express.json());

const PORT = process.env.PORT || 5000;

mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log("MongoDB connected"))
  .catch(err => console.error(err));

const customerSchema = new mongoose.Schema({
  name: String,
  company: String,
  email: String,
  phone: String,
  address: String,
  notes: String,
  createdAt: { type: Date, default: Date.now },
});

const Customer = mongoose.model("Customer", customerSchema);

app.get("/", (req, res) => {
  res.send("Repairpoint24 CRM Backend läuft.");
});

app.listen(PORT, () => {
  console.log(`Server läuft auf Port ${PORT}`);
});
EOF

# Datei: .env (nicht hochladen)
cat > .env << 'EOF'
MONGO_URI=mongodb+srv://<user>:<pass>@cluster.mongodb.net/repairpoint24_crm
EOF

cd ..

# === 3. Frontend mit React einrichten ===
npx create-react-app client
cd client

# App.js überschreiben
cat > src/App.js << 'EOF'
import React from "react";

function App() {
  return (
    <div className="p-4">
      <h1 className="text-2xl font-bold">Repairpoint24 CRM</h1>
      <p>Dashboard – Übersicht über deine Kundenkontakte.</p>
    </div>
  );
}

export default App;
EOF

cd ..

# === Fertig ===
echo "✔️ Setup abgeschlossen. Starte Backend mit: node server/index.js"
echo "✔️ Starte Frontend mit: cd client && npm start"
